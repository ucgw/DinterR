--- /home/dinter/csce499/linux-4.19.143/fs/read_write.c.orig	2020-12-22 11:23:27.950898223 -0600
+++ /home/dinter/csce499/linux-4.19.143/fs/read_write.c	2020-12-22 17:23:48.586460645 -0600
@@ -20,6 +20,7 @@
 #include <linux/compat.h>
 #include <linux/mount.h>
 #include <linux/fs.h>
+#include <linux/kernel.h>  /* abs macro */
 #include "internal.h"
 
 #include <linux/uaccess.h>
@@ -316,6 +317,14 @@
 			retval = -EOVERFLOW;	/* LFS: should only happen on 32 bit platforms */
 	}
 	fdput_pos(f);
+
+	/* mutex lock on f_pos here because fdput_pos
+	 * releases mutex
+	 */
+        mutex_lock(&f.file->f_pos_lock);
+	fsnotify_access(f.file, (size_t)whence, f.file->f_pos);
+        mutex_unlock(&f.file->f_pos_lock);
+
 	return retval;
 }
 
@@ -451,7 +460,6 @@
 			count =  MAX_RW_COUNT;
 		ret = __vfs_read(file, buf, count, pos);
 		if (ret > 0) {
-			fsnotify_access(file);
 			add_rchar(current, ret);
 		}
 		inc_syscr(current);
@@ -924,8 +932,8 @@
 	else
 		ret = do_loop_readv_writev(file, iter, pos, READ, flags);
 out:
-	if (ret >= 0)
-		fsnotify_access(file);
+	if (ret >= 0) {
+        }
 	return ret;
 }
 
@@ -1450,7 +1458,7 @@
 	if (retval > 0) {
 		add_rchar(current, retval);
 		add_wchar(current, retval);
-		fsnotify_access(in.file);
+
 		fsnotify_modify(out.file);
 		out.file->f_pos = out_pos;
 		if (ppos)
@@ -1616,7 +1624,6 @@
 
 done:
 	if (ret > 0) {
-		fsnotify_access(file_in);
 		add_rchar(current, ret);
 		fsnotify_modify(file_out);
 		add_wchar(current, ret);
@@ -1900,7 +1907,6 @@
 	ret = file_in->f_op->clone_file_range(file_in, pos_in,
 			file_out, pos_out, len);
 	if (!ret) {
-		fsnotify_access(file_in);
 		fsnotify_modify(file_out);
 	}
 
