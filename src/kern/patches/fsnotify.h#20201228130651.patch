--- /home/dinter/csce499/linux-4.19.143/include/linux/fsnotify.h.orig	2020-12-22 23:33:47.328549153 -0600
+++ /home/dinter/csce499/linux-4.19.143/include/linux/fsnotify.h	2020-12-28 11:46:57.626839031 -0600
@@ -16,6 +16,8 @@
 #include <linux/audit.h>
 #include <linux/slab.h>
 #include <linux/bug.h>
+#include <linux/pid.h>  /* struct task_struct, get_pid_task */
+#include <linux/timekeeping.h>  /* ktime_get, ktime_to_timeval */
 
 /* Notify this dentry's parent about a child's events. */
 static inline int fsnotify_parent(const struct path *path, struct dentry *dentry, __u32 mask)
@@ -171,18 +173,32 @@
 /*
  * fsnotify_access - file was read
  */
-static inline void fsnotify_access(struct file *file)
+static inline void fsnotify_access(struct file *file, ssize_t count, loff_t pos)
 {
 	const struct path *path = &file->f_path;
 	struct inode *inode = file_inode(file);
+        struct fsnotify_extra_data fs_xdata;
 	__u32 mask = FS_ACCESS;
 
 	if (S_ISDIR(inode->i_mode))
 		mask |= FS_ISDIR;
 
 	if (!(file->f_mode & FMODE_NONOTIFY)) {
+		/* high res timestamp */
+		fs_xdata.fse_atime = ktime_to_timeval(ktime_get());
+		/* file offset */
+		fs_xdata.count = count;
+		/* file position */
+		fs_xdata.pos = pos;
+		/* pid controlling SIGIO (placeholder) */
+		fs_xdata.pid = 0;
+		/* file readahead state data */
+		fs_xdata.ra_page_count = file->f_ra.size;
+		fs_xdata.ra_misses = file->f_ra.mmap_miss;
+		fs_xdata.last_cached_pos = file->f_ra.prev_pos;
+
 		fsnotify_parent(path, NULL, mask);
-		fsnotify(inode, mask, path, FSNOTIFY_EVENT_PATH, NULL, 0);
+		fsnotify(inode, mask, &fs_xdata, FSNOTIFY_EVENT_INODE_PLUS, NULL, 0);
 	}
 }
 
