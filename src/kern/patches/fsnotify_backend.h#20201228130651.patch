--- /home/dinter/csce499/linux-4.19.143/include/linux/fsnotify_backend.h.orig	2020-12-22 23:33:47.326549148 -0600
+++ /home/dinter/csce499/linux-4.19.143/include/linux/fsnotify_backend.h	2020-12-28 11:41:16.659456606 -0600
@@ -19,6 +19,7 @@
 #include <linux/atomic.h>
 #include <linux/user_namespace.h>
 #include <linux/refcount.h>
+#include <linux/time.h>  /* struct timeval */
 
 /*
  * IN_* from inotfy.h lines up EXACTLY with FS_*, this is so we can easily
@@ -115,6 +116,26 @@
 	void (*free_mark)(struct fsnotify_mark *mark);
 };
 
+/* DinterR extra data struct
+ * - for now only used for fsnotify_access events  
+ */
+struct fsnotify_extra_data {
+	/* bytes read */
+	ssize_t count;
+	/* byte position in struct file* */
+	loff_t pos;
+	/* process id triggering fsnotify_access event */
+	pid_t pid;
+	/* timestamp of fsnotify_access event */
+	struct timeval fse_atime;
+	/* cache misses for readahead on a file* */
+	unsigned int ra_misses;
+	/* current number of readahead pages for file* */
+	unsigned int ra_page_count;
+	/* cached last read position */
+	loff_t last_cached_pos;
+};
+
 /*
  * all of the information about the original object we want to now send to
  * a group.  If you want to carry more info from the accessing task to the
@@ -125,6 +146,8 @@
 	/* inode may ONLY be dereferenced during handle_event(). */
 	struct inode *inode;	/* either the inode the event happened to or its parent */
 	u32 mask;		/* the type of access, bitwise OR for FS_* event types */
+	/* DinterR extra data */
+	struct fsnotify_extra_data extra;
 };
 
 /*
@@ -203,10 +226,12 @@
 	};
 };
 
-/* when calling fsnotify tell it if the data is a path or inode */
+/* DinterR extra data is type FSNOTIFY_EVENT_INODE_PLUS */
+/* when calling fsnotify tell it if the data is a path or inode or...something more */
 #define FSNOTIFY_EVENT_NONE	0
 #define FSNOTIFY_EVENT_PATH	1
 #define FSNOTIFY_EVENT_INODE	2
+#define FSNOTIFY_EVENT_INODE_PLUS 3
 
 enum fsnotify_obj_type {
 	FSNOTIFY_OBJ_TYPE_INODE,
